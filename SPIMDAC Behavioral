----------------------------------------------------------------------------------
-- Engineer: Heet Vinodbhai Gadhiya
-- Create Date: 06/06/2023 03:47:19 PM
-- Design Name: SPI
-- Module Name: spimdac - Behavioral
-- Description: SPI master CPOL=0, CPHA=1, 8bits
-----------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity spimdac is
    Port ( reset : in STD_LOGIC;
           bclk : in STD_LOGIC;
           start : in STD_LOGIC;
           sndData : in STD_LOGIC_VECTOR (7 downto 0);
           rcvData : out STD_LOGIC_VECTOR (7 downto 0));
end spimdac;

architecture Behavioral of spimdac is

CONSTANT USPI_NBITS : integer :=8;

TYPE State_type IS  (sidle, sstartx, sstart_lo, sclk_hi, sclk_lo, sstop_hi,sstop_lo);
SIGNAL state, next_state:State_type;
SIGNAL sclk_i, scsq_i, sdo_i, start_i: std_logic;
SIGNAL sclk, scsq, sdo, sdi, done : std_logic;
SIGNAL rd_buf, wr_buf : STD_LOGIC_VECTOR (USPI_NBITS-1 downto 0);
SIGNAL count : integer RANGE 0 to USPI_NBITS-1;

--Simulator
CONSTANT CLK_DIV : integer :=3;
--Hardware
--CONSTANT CLK_DIV : integer :=10000000;
SUBTYPE ClkDIV_type IS integer RANGE 0 to CLK_DIV-1;
SIGNAL spi_clkp : std_logic;

begin

    rcvData <= rd_buf;
    sdi <= NOT sdo;
    start_i <= start AND done AND NOT sclk AND scsq;
    
    clk_d : PROCESS(bclk)
    VARIABLE cnt : ClkDIV_type;
    BEGIN
        IF rising_edge(bclk) THEN
            spi_clkp <= '0';
            IF reset = '1' THEN
                cnt := CLK_DIV-1;
            ELSIF cnt= 0 THEN
                spi_clkp <= '1';
                cnt := CLK_DIV-1;
            ELSE
                 cnt := cnt-1;                
            END IF;
         END IF;  
    END PROCESS clk_d;


-- SEQUENTIAL PROCESS (transitions)
    seq_p : PROCESS(bclk)
    BEGIN
    
        IF rising_edge(bclk) THEN
            IF reset = '1' THEN
                state <= sidle;
                count <= USPI_NBITS-1;
                sclk <= '0'; scsq <= '1'; sdo <= '0';
            ELSIF spi_clkp = '1' THEN 
                IF next_state = sstartx THEN
                    wr_buf<= sndData;
                    count <= USPI_NBITS-1;
                                                 
                ELSIF next_state = sclk_lo THEN
                    wr_buf <= wr_buf(USPI_NBITS-2 downto 0) & '-'; --left shift
                    rd_buf <= rd_buf(USPI_NBITS-2 downto 0) & sdi; --left shift in read buffer      
                ELSIF next_state = sstop_lo THEN
                    rd_buf <= rd_buf(USPI_NBITS-2 downto 0) & sdi; --left shift in read buffer   
                ELSIF next_state = sclk_hi THEN
                    count <= count-1;               
                END IF;                   
            state <= next_state;
            scsq <= scsq_i;
            sclk <= sclk_i;
            sdo <= sdo_i;   
            END IF;             
        END IF;
    END PROCESS seq_p;
      
    
 -- COMBINTIONAL PROCESS (transitions)
    cmb_p : PROCESS(state, start_i)
    BEGIN
        next_state<= state;
        scsq_i <= '0';
        sclk_i <= '0';
        sdo_i <= '0';
        done <= '0';
        CASE state IS 
            WHEN sidle =>       
                done <= '1';
                scsq_i <= '1';
                IF start_i = '1' THEN 
                    next_state <= sstartx;
                END IF;           
            WHEN sstartx =>
                next_state <= sstart_lo;
            WHEN sstart_lo =>
                next_state <= sclk_hi;
                sclk_i <= '1';
                sdo_i <= wr_buf(USPI_NBITS-1);
            WHEN sclk_hi =>
                next_state <=sclk_lo;
                sdo_i <= wr_buf(USPI_NBITS-1);
            WHEN sclk_lo =>
                sclk_i<= '1';
                
                    IF count= 0 THEN 
                        next_state<= sstop_hi;
                    ELSE
                            next_state <= sclk_hi;
                    END IF;   
                    sdo_i <= wr_buf(USPI_NBITS-1);            
            WHEN sstop_hi =>
                next_state <= sstop_lo;
                sdo_i <= wr_buf(USPI_NBITS-1);
            WHEN sstop_lo =>
                next_state <=sidle;
                scsq_i <= '1';
        END CASE;
    END PROCESS cmb_p;
      
end Behavioral;
